package lsi111.analise;

public interface ParserConstants
{
    int START_SYMBOL = 58;

    int FIRST_NON_TERMINAL    = 58;
    int FIRST_SEMANTIC_ACTION = 91;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1,  0, -1, -1, -1,  0, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1,  3, -1, -1, -1,  3, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1,  4, -1, -1, -1,  5, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, 25, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 20, 20, 20, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 21, 23, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 24, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1 },
        { -1, 78, 79, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, 33, 39, -1, -1, -1, 34, -1, 39, 37, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, 36, 39, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 45, -1, -1, -1, -1, -1, 44, -1, 43, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1 },
        { -1, 48, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, 46, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 57, 57, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, 50, -1, 49, 49, 49, -1, 50, -1, 50, -1, -1, -1, -1, -1, -1, -1, 49, 49, 49 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 54, 55 },
        { -1, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, 59, 59, -1, -1, 58, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 59, 59, -1, 59, 59, 59, -1, 59, -1, 59, 58, 58, -1, -1, -1, -1, -1, 59, 59, 59 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 61, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 73, 73, 73, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, 65, 65, -1, -1, 65, 64, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 65, 65, -1, 65, 65, 65, -1, 65, -1, 65, 65, 65, 64, 64, -1, -1, -1, 65, 65, 65 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 67, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, 77, 77, -1, -1, 77, 77, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, 77, 77, -1, 77, 77, 77, 75, 77, 76, 77, 77, 77, 77, 77, -1, -1, -1, 77, 77, 77 }
    };

    int[][] PRODUCTIONS = 
    {
        { 59, 60, 40 },
        { 61, 62, 63 },
        { 31, 64,  5, 43, 65, 38, 61 },
        {  0 },
        {  7, 66, 52, 67, 38, 62 },
        {  0 },
        { 68, 38, 63 },
        {  0 },
        { 32,  5, 69, 38, 59, 60 },
        { 15,  5, 69, 52, 64, 38, 59, 60 },
        { 44, 70, 45 },
        {  0 },
        { 33, 66, 52, 64, 71 },
        { 34, 66, 52, 64, 71 },
        { 38, 70 },
        {  0 },
        {  5, 72 },
        { 39,  5, 72 },
        {  0 },
        {  5 },
        { 73 },
        { 64 },
        { 35, 65, 54, 65 },
        {  9, 46, 65, 47 },
        { 29, 46, 65, 47, 26, 64 },
        { 13 },
        { 28 },
        { 14 },
        {  8 },
        { 11, 74, 75, 12 },
        { 38, 74, 75 },
        {  0 },
        {  5, 76 },
        { 11, 74, 75, 12 },
        { 16, 77, 17, 74, 78 },
        { 30, 77, 27, 74 },
        { 36, 74, 37, 77 },
        { 19, 44, 66, 45 },
        { 20, 44, 77, 79 },
        {  0 },
        { 18, 74 },
        {  0 },
        { 53, 77 },
        { 46, 77, 47, 53, 77 },
        { 44, 77, 79, 45 },
        {  0 },
        { 39, 77, 79 },
        {  0 },
        { 80, 81 },
        { 82, 80 },
        {  0 },
        { 43 },
        { 42 },
        { 41 },
        { 56 },
        { 57 },
        { 55 },
        { 83, 84 },
        { 85, 83, 84 },
        {  0 },
        { 48 },
        { 49 },
        { 21 },
        { 86, 87 },
        { 88, 86, 87 },
        {  0 },
        { 50 },
        { 51 },
        { 22 },
        { 23, 86 },
        { 49, 86 },
        { 44, 77, 45 },
        { 89 },
        { 73 },
        {  5, 90 },
        { 44, 77, 79, 45 },
        { 46, 77, 47 },
        {  0 },
        {  2 },
        {  3 },
        { 24 },
        { 25 },
        {  4 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "Era esperado fim de programa",
        "Era esperado num_int",
        "Era esperado num_real",
        "Era esperado literal",
        "Era esperado um identificador",
        "Era esperado programa",
        "Era esperado var",
        "Era esperado caracter",
        "Era esperado cadeia",
        "Era esperado procedimento",
        "Era esperado inicio",
        "Era esperado fim",
        "Era esperado inteiro",
        "Era esperado booleano",
        "Era esperado funcao",
        "Era esperado se",
        "Era esperado entao",
        "Era esperado senao",
        "Era esperado leia",
        "Era esperado escreva",
        "Era esperado ou",
        "Era esperado e",
        "Era esperado nao",
        "Era esperado falso",
        "Era esperado verdadeiro",
        "Era esperado de",
        "Era esperado faca",
        "Era esperado real",
        "Era esperado vetor",
        "Era esperado enquanto",
        "Era esperado const",
        "Era esperado proc",
        "Era esperado ref",
        "Era esperado val",
        "Era esperado intervalo",
        "Era esperado repita",
        "Era esperado ate",
        "Era esperado \";\"",
        "Era esperado \",\"",
        "Era esperado \".\"",
        "Era esperado \">\"",
        "Era esperado \"<\"",
        "Era esperado \"=\"",
        "Era esperado \"(\"",
        "Era esperado \")\"",
        "Era esperado \"[\"",
        "Era esperado \"]\"",
        "Era esperado \"+\"",
        "Era esperado \"-\"",
        "Era esperado \"*\"",
        "Era esperado \"/\"",
        "Era esperado \":\"",
        "Era esperado \":=\"",
        "Era esperado \"..\"",
        "Era esperado \"<>\"",
        "Era esperado \">=\"",
        "Era esperado \"<=\"",
        "Programa inválido. É necessário pelo menos um comando seguido de ponto" , //"<programa> inválido",
        "Símbolo inválido",                                 //"<declaracoes> inválido",
        "Era esperada lista de comandos",                   //"<comandos> inválido",
        "Declaração de constante inválida",                 //"<dcl_const> inválido",
        "Símbolo inválido",                                 //"<dcl_var> inválido",
        "Era esperada declaração ou comando",               //"<dcl_procs> inválido",
        "Era esperado um tipo válido",                      //"<tipo_pre_def> inválido",
        "Constante inválida",                               //"<constante> inválido",
        "Era esperado um identificador",                    //"<lid> inválido",
        "Era esperado um tipo válido",                      //"<tipo> inválido",
        "Era esperado \"proc\"",                            //"<dcl_proc> inválido",
        "Parâmetros inválidos.",                            //"<parametros> inválido",
        "Declaração de parâmetros inválido",                //"<listapar> inválido",
        "Declaração de parâmetros inválido",                //"<rep_listapar> inválido",
        "Símbolo inválido",                                 //"<rep_id> inválido",
        "Constante explícita inválida",                     //"<constante_explicita> inválido",
        "Comando inválido",                                 //"<comando> inválido",
        "Era esperado bloco de comandos",                   //"<rep_comando> inválido",
        "Expressão inválida",                               //"<rcomid> inválido",
        "Expressão inválida",                               //"<expressao> inválido",
        "Esperado \"senao\"",                               //"<senaoparte> inválido",
        "Expressão inválida",                               //"<rep_expressao> inválido",
        "Expressão inválida",                               //"<expsimp> inválido",
        "Formação da expressão inválida",                   //"<resto_expressao> inválido",
        "Operador inválido",                                //"<oprel> inválido",
        "Termo inválido",                                   //"<termo> inválido",
        "Expressão inválida",                               //"<rep_expsimp> inválido",
        "Operador aritmético inválido",                     //"<op_add> inválido",
        "Operando inválido",                                //"<fator> inválido",
        "Termo inválido",                                   //"<rep_termo> inválido",
        "Operador aritmético inválido",                     //"<op_mult> inválido",
        "Variável inválida",                                //"<variavel> inválido",
        "Variáveis inválidas.",                             //"<rvar> inválido"
    };
}
